# main.py
import logging
import sys
import time
from multiprocessing import Process, Manager
from threading import Thread
import queue
from db.db import create_tables
from db.models import Database, SettingsModel
from account_manager.manager import AccountManager
from monitoring import monitor_account   # —Ñ–∞–π–ª –≤—ã—à–µ

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
logging.basicConfig(
    level=logging.WARNING,  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    stream=sys.stdout
)

# –ì–ª—É—à–∏–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ª–æ–≥–≥–µ—Ä—ã, —á—Ç–æ–±—ã WebDriver Manager, Selenium –∏ urllib3 –Ω–µ —Å–ø–∞–º–∏–ª–∏ INFO
for noisy_logger in ("WDM", "seleniumwire", "selenium", "urllib3"):
    logging.getLogger(noisy_logger).setLevel(logging.WARNING)

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------------
create_tables()
db = Database()
manager = AccountManager(db)

active_monitors = {}  # account_id -> Process

# ---------------- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ----------------
def handle_start_monitoring(log_queue):
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ").strip()
    account = manager.account_model.get_account_by_username(user_name)
    if not account:
        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.", flush=True)
        return

    account_id = account["id"]
    if account_id in active_monitors:
        print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", flush=True)
        return

    # ensure settings exist
    settings_model = SettingsModel(db)
    settings = settings_model.get_settings(account_id)
    if not settings:
        settings_model.add_settings_for_account(account_id)
        settings = settings_model.get_settings(account_id)
        print(f"‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è @{user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî —Å–æ–∑–¥–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", flush=True)

    account_info = {"id": account_id, "username": account["username"]}
    p = Process(target=monitor_account, args=(account_info, log_queue), daemon=True)
    p.start()
    active_monitors[account_id] = p
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {user_name} (PID: {p.pid})", flush=True)

def handle_stop_monitoring():
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ").strip()
    account = manager.account_model.get_account_by_username(user_name)
    if not account:
        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {user_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.", flush=True)
        return

    account_id = account["id"]
    if account_id not in active_monitors:
        print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω.", flush=True)
        return

    p = active_monitors[account_id]
    p.terminate()
    p.join()
    del active_monitors[account_id]
    print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_name}", flush=True)

# ---------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ ----------------
def input_reader(stop_flag):
    try:
        line = input().strip().lower()
        if line == "q":
            stop_flag.value = True
    except Exception:
        stop_flag.value = True

def view_logs(log_queue, stop_flag):
    print("\n=== –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (–≤–≤–µ–¥–∏—Ç–µ 'q' + Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞) ===", flush=True)
    stop_flag.value = False
    t = Thread(target=input_reader, args=(stop_flag,), daemon=True)
    t.start()
    try:
        while not stop_flag.value:
            try:
                msg = log_queue.get(timeout=0.5)
                if msg == "__STOP__":
                    break
                print(msg, flush=True)
            except queue.Empty:
                continue
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (Ctrl+C).", flush=True)
    finally:
        stop_flag.value = True
        t.join()
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.\n", flush=True)

# ---------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------------
def main_menu():
    print("\n=== Twitter Bot ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===", flush=True)
    print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", flush=True)
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", flush=True)
    print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", flush=True)
    print("4. –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", flush=True)
    print("5. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", flush=True)
    print("6. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", flush=True)
    print("7. –í—ã—Ö–æ–¥", flush=True)
    return input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

# ---------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------------
if __name__ == "__main__":
    with Manager() as mgr:
        log_queue = mgr.Queue()
        stop_flag = mgr.Value('b', False)

        try:
            while True:
                choice = main_menu()
                if choice == "1":
                    manager.register_account()
                elif choice == "2":
                    manager.check_account()
                elif choice == "3":
                    manager.settings_menu()
                elif choice == "4":
                    handle_start_monitoring(log_queue)
                elif choice == "5":
                    handle_stop_monitoring()
                elif choice == "6":
                    view_logs(log_queue, stop_flag)
                elif choice == "7":
                    print("üëã –í—ã—Ö–æ–¥.", flush=True)
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", flush=True)
        except KeyboardInterrupt:
            print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ Ctrl+C.", flush=True)
        finally:
            # –ó–∞–≤–µ—Ä—à–∏–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
            for p in list(active_monitors.values()):
                try:
                    p.terminate()
                    p.join(timeout=2)
                except Exception:
                    pass
            active_monitors.clear()
            # —Å–∏–≥–Ω–∞–ª–∏–º –ª–æ–≥–∞–º –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            try:
                log_queue.put("__STOP__")
            except Exception:
                pass
            db.close()
